@startuml "Help us Class Diagram"
title "Help us Class Diagram"

' avoid problems with angled crows feet
skinparam linetype ortho

class SquareAuthController {
    + authorize(AuthorizeWithSquareCommand command)
    + getAuthLink(GetAuthLinkCommand command)
    + webhook(SetMerchantInfoWebHookCommand command)
}

class AuthorizeWithSquareCommand {
    + grant_type : string
    + refresh_token : string
    + code : string
    + square_service : SquareService
    + execute(self) : ObtainTokenResponse
}

class GetAuthLinkCommand {
    + square_service : SquareService
    + user_id : string
    + execute(self) : string
}

SquareAuthController ..> AuthorizeWithSquareCommand : uses
SquareAuthController ..> GetAuthLinkCommand : uses

class SquareService {
    + Variables : Variables
    + Constants : Constants
    + DirectusRepository : DirectusRepository
    + get_access_token(self, command) : str
    + set_merchant_information_for_user(self, SetMerchantInfoWebHookCommand command) : None
    + get_square_auth_link(self, command) : str
    + authorize_with_square(self, AuthorizeWithSquareCommand command) : ObtainTokenResponse
    + checkout_with_square(self, CheckoutWithSquareCommand command) : CheckoutResponse
    + update_with_square(self, UpdateWithSquareCommand command) : bool
    + delete_link_square(self, DeleteLinkSquareCommand command) : bool
    + get_payment_link(self, RetrieveWithSquareCommand command) : string
    + list_locations(self, ListLocationsSquareCommand command) : LocationResponse
    + get_location_information(self, RetrieveLocationSquareCommand command) : bool
}

class ObtainTokenResponse {
    + access_token : string
    + merchant_id : string
    + refresh_token : string
    + short_lived : string
}

class ObtainTokenRequest {
    + grant_type : string
    + refresh_token : string
    + code : string
    + short_lived : string
    + client_id : string
    + client_secret : string
    + scopes : string
}

SquareService ..> ObtainTokenResponse : uses
SquareService ..> ObtainTokenRequest : uses
AuthorizeWithSquareCommand ..> SquareService : uses
GetAuthLinkCommand ..> SquareService : uses

class SquarePaymentController {
    + create(CheckoutWithSquareCommand command)
    + read(RetrieveWithSquareCommand command)
    + update(UpdateWithSquareCommand command)
    + delete(DeleteLinkSquareCommand command)
}

class CheckoutWithSquareCommand {
    + square_service : SquareService
    + execute(self) : CheckoutResponse
}

class RetrieveWithSquareCommand {
    + square_service : SquareService
    + execute(self) : CheckoutResponse
}

class UpdateWithSquareCommand {
    + square_service : SquareService
    + execute(self) : bool
}

class DeleteLinkSquareCommand {
    + square_service : SquareService
    + execute(self) : bool
}

class CheckoutResponse {
    + payment_link : PaymentLink
}

class  CheckoutRequest{
    + order : Order
    + source : string
    + payment_note : string
    + checkout_options : CheckoutOptions
    }

SquareService ..> CheckoutResponse : uses
SquareService ..> CheckoutRequest : uses




SquarePaymentController ..> CheckoutWithSquareCommand : uses
SquarePaymentController ..> RetrieveWithSquareCommand : uses
SquarePaymentController ..> UpdateWithSquareCommand : uses
SquarePaymentController ..> DeleteLinkSquareCommand : uses

CheckoutWithSquareCommand ..> SquareService : uses
RetrieveWithSquareCommand ..> SquareService : uses
UpdateWithSquareCommand ..> SquareService : uses
DeleteLinkSquareCommand ..> SquareService : uses

class SquareLocationController {
    + list_locations(ListLocationsSquareCommand command)
    + get_location_information(RetrieveLocationSquareCommand command)
}

class ListLocationsSquareCommand {
    + square_service : SquareService
    + execute(self) : LocationResponse
}

class RetrieveLocationSquareCommand {
    + square_service : SquareService
    + execute(self) : bool
}

class LocationResponse {
    + location : Location
}


SquareLocationController ..> ListLocationsSquareCommand : uses
SquareLocationController ..> RetrieveLocationSquareCommand : uses
ListLocationsSquareCommand ..> SquareService : uses
RetrieveLocationSquareCommand ..> SquareService : uses
SquareService ..> LocationResponse : uses

class DirectusRepository {
    + set_merchant_information_for_user(String user_id , MerchantInfo info)
    + get_user_by_id(String user_id)
    + update_items_status_to_complete(List<String> items_ids, String buyer_email)
}

class MerchantInfo {
    + merchant_id : string
    + access_token : string
    + refresh_token : string
    + expires_in : string
}

class SetMerchantInfoWebHookCommand {
    + square_service : SquareService
    + user_id : string
    + merchant_id : string
    + access_token : string
    + refresh_token : string
    + expires_in : string
    + execute(self) : None
}

DirectusRepository ..> MerchantInfo : uses
SquareService ..> DirectusRepository : uses
SetMerchantInfoWebHookCommand ..> SquareService : uses
SquareAuthController ..> SetMerchantInfoWebHookCommand : uses


class Scraper {
    - cart_type : string
    - body : string
    - Constants : Constants
    + scrape_body()
    + scrape_amazon()
    + scrape_ebay()
    + scrape_target()
}

@enduml

